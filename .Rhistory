dt = dt[!grepl("_metazoa",(rownames(dt))),]
} else {
dt = dt[!grepl("_embryophyt",(rownames(dt))),]
}
all_dt = rbind(all_dt,dt[columns,]$value)
}
}
colnames(all_dt) = columns
method_list = c("Embryophyta_v1"="Embryophyta_v1/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v6"="Eukaryota_v6/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v7"="Eukaryota_v7/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v9"="Metazoa_v9/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v6"="Metazoa_v6/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v5"="Metazoa_v5/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v4"="Metazoa_v4/subset_200_ksites/data_calculation.tab",
"Metazoa_species_filtered_v53.2"="Metazoa_species_filtered_v53.2/subset_200_ksites_GC3/data_calculation.tab")
for (method in names(method_list)){ print(method)
data_dNdS = read.delim(paste(path,"Projet-SplicedVariants/DnDs/",method_list[method],sep=""))
data_dNdS = data_dNdS[!is.na(data_dNdS$branch_length),]
for (species in unique(all_dt$species)){
data_sequence = data_dNdS[ data_dNdS$species == species,]
dnds_values = get_CM_dNdS_true(data_sequence)
all_dt[all_dt$species == species,paste(method,"_dn;quant",sep="")] = dnds_values[1]
all_dt[all_dt$species == species,paste(method,"_ds;quant",sep="")] = dnds_values[2]
all_dt[all_dt$species == species,paste(method,"_dnds;quant",sep="")] = dnds_values[3]
}
}
all_dt$`longevity;quant` = metazoa_species_clade_lht[all_dt$species,]$lifespan
all_dt$`length;quant` = metazoa_species_clade_lht[all_dt$species,]$length
all_dt$`weight;quant` = metazoa_species_clade_lht[all_dt$species,]$weight
write.table(all_dt,paste("/home/fbenitiere/Desktop/ICASDB_app/www/species_informations_tables/data_by_species.tab",sep=""),sep="\t",quote=F,row.names = F, col.names = T)
View(all_dt)
method_list = c("Embryophyta_v1"="Embryophyta_v1/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v6"="Eukaryota_v6/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v7"="Eukaryota_v7/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v11"="Metazoa_v11/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v9"="Metazoa_v9/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v6"="Metazoa_v6/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v5"="Metazoa_v5/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v4"="Metazoa_v4/subset_200_ksites/data_calculation.tab",
"Metazoa_species_filtered_v53.2"="Metazoa_species_filtered_v53.2/subset_200_ksites_GC3/data_calculation.tab")
for (method in names(method_list)){ print(method)
data_dNdS = read.delim(paste(path,"Projet-SplicedVariants/DnDs/",method_list[method],sep=""))
data_dNdS = data_dNdS[!is.na(data_dNdS$branch_length),]
for (species in unique(all_dt$species)){
data_sequence = data_dNdS[ data_dNdS$species == species,]
dnds_values = get_CM_dNdS_true(data_sequence)
all_dt[all_dt$species == species,paste(method,"_dn;quant",sep="")] = dnds_values[1]
all_dt[all_dt$species == species,paste(method,"_ds;quant",sep="")] = dnds_values[2]
all_dt[all_dt$species == species,paste(method,"_dnds;quant",sep="")] = dnds_values[3]
}
}
all_dt$`longevity;quant` = metazoa_species_clade_lht[all_dt$species,]$lifespan
all_dt$`length;quant` = metazoa_species_clade_lht[all_dt$species,]$length
all_dt$`weight;quant` = metazoa_species_clade_lht[all_dt$species,]$weight
write.table(all_dt,paste("/home/fbenitiere/Desktop/ICASDB_app/www/species_informations_tables/data_by_species.tab",sep=""),sep="\t",quote=F,row.names = F, col.names = T)
all_dt$`Metazoa_v11_dn;quant`
options( stringsAsFactors = F, scipen = 999 )
path = "/home/fbenitiere/data/"
metazoa_species_clade_lht = rbind( read.table(paste(path , "Projet-SplicedVariants/Fichiers-data/metazoa_species_clade_lht.tab",sep=""),header=T) ,
read.table(paste(path , "Projet-SplicedVariants/Fichiers-data/metazoa_species2_clade_lht.tab",sep=""),header=T),
read.table(paste(path , "Projet-SplicedVariants/Fichiers-data/embryophyta_species_clade_lht.tab",sep=""),header=T) )
rownames(metazoa_species_clade_lht) = metazoa_species_clade_lht$species
table(metazoa_species_clade_lht$clade)
metazoa_species_clade_lht[,"clade_group"] = "Other Invertebrates"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Amphibia","Mammalia","Aves","Lepidosauria","Testudines","Crocodylia","Teleostei","Anura","Chondrichthyes"),"clade_group"] = "Other Vertebrates"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Blattodea","Coleoptera","Ephemeroptera","Hemiptera","Thysanoptera"),"clade_group"] = "Other Insecta"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Diptera","Lepidoptera"),"clade_group"] = "Lepido Diptera"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Nematoda","Hymenoptera","Mammalia","Aves","Teleostei","Embryophyta"),"clade_group"] = metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Hymenoptera","Nematoda","Mammalia","Aves","Teleostei","Embryophyta"),"clade"]
metazoa_species_clade_lht$clade_group = factor(metazoa_species_clade_lht$clade_group, levels = c("Lepido Diptera","Hymenoptera","Other Insecta","Nematoda","Other Invertebrates","Mammalia","Aves","Teleostei","Other Vertebrates","Embryophyta"))
table(metazoa_species_clade_lht$clade_group)
# restrain = metazoa_species_clade_lht[!sapply(metazoa_species_clade_lht$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/summary_characteristics.tab",sep="")) ),]
#
# restrain$got_overlap = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_intron_major_overlap.tab",sep="")) )
# restrain$got_gene = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_gene_analysis.tab",sep="")) )
# restrain$got_gene = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_gene_analysis.tab",sep="")) )
# restrain = restrain[restrain$got_gene,]
# restrain$got_gc = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Annotations/",x,"/GC_content.tab",sep="")) )
# restrain$got_intron = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_intron_cds.tab",sep="")) )
#
# paste(restrain[restrain$got_overlap,]$species,collapse="','")
get_CM_dNdS_true <- function(D) {
cum_KS=sum(D$num_dS)
cum_KN=sum(D$num_dN)
cum_OS=sum(D$den_dS/D$branch_length)
cum_ON=sum(D$den_dN/D$branch_length)
cum_dS=cum_KS/cum_OS
cum_dN=cum_KN/cum_ON
cum_dNdS=cum_dN/cum_dS
return(c(cum_dN,cum_dS,cum_dNdS))
}
# species = 'Cervus_elaphus'
# RECUPERE COLONNE
all_dt = c()
for (species in metazoa_species_clade_lht$species){
if (file.exists(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))){
dt = read.delim(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))
if( "longevity;quant" %in% dt$label){print(species)
# file.remove(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))
}
all_dt = c(dt$label,all_dt)
}
}
columns = unique(all_dt)
all_dt = data.frame()
for (species in metazoa_species_clade_lht$species){print(species)
if (file.exists(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))){
dt = read.delim(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))
rownames(dt) = dt$label
if (metazoa_species_clade_lht[species,]$clade == "Embryophyta"){
dt = dt[!grepl("_metazoa",(rownames(dt))),]
} else {
dt = dt[!grepl("_embryophyt",(rownames(dt))),]
}
all_dt = rbind(all_dt,dt[columns,]$value)
}
}
colnames(all_dt) = columns
method_list = c("Embryophyta_v1"="Embryophyta_v1/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v6"="Eukaryota_v6/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v7"="Eukaryota_v7/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v11"="Metazoa_v11/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v9"="Metazoa_v9/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v6"="Metazoa_v6/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v5"="Metazoa_v5/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v4"="Metazoa_v4/subset_200_ksites/data_calculation.tab",
"Metazoa_species_filtered_v53.2"="Metazoa_species_filtered_v53.2/subset_200_ksites_GC3/data_calculation.tab")
for (method in names(method_list)){ print(method)
data_dNdS = read.delim(paste(path,"Projet-SplicedVariants/DnDs/",method_list[method],sep=""))
data_dNdS = data_dNdS[!is.na(data_dNdS$branch_length),]
for (species in unique(all_dt$species)){
data_sequence = data_dNdS[ data_dNdS$species == species,]
dnds_values = get_CM_dNdS_true(data_sequence)
all_dt[all_dt$species == species,paste(method,"_dn;quant",sep="")] = dnds_values[1]
all_dt[all_dt$species == species,paste(method,"_ds;quant",sep="")] = dnds_values[2]
all_dt[all_dt$species == species,paste(method,"_dnds;quant",sep="")] = dnds_values[3]
}
}
all_dt$`longevity;quant` = metazoa_species_clade_lht[all_dt$species,]$lifespan
all_dt$`length;quant` = metazoa_species_clade_lht[all_dt$species,]$length
all_dt$`weight;quant` = metazoa_species_clade_lht[all_dt$species,]$weight
write.table(all_dt,paste("/home/fbenitiere/Desktop/ICASDB_app/www/species_informations_tables/data_by_species.tab",sep=""),sep="\t",quote=F,row.names = F, col.names = T)
shiny::runApp()
options( stringsAsFactors = F, scipen = 999 )
path = "/home/fbenitiere/data/"
metazoa_species_clade_lht = rbind( read.table(paste(path , "Projet-SplicedVariants/Fichiers-data/metazoa_species_clade_lht.tab",sep=""),header=T) ,
read.table(paste(path , "Projet-SplicedVariants/Fichiers-data/metazoa_species2_clade_lht.tab",sep=""),header=T),
read.table(paste(path , "Projet-SplicedVariants/Fichiers-data/embryophyta_species_clade_lht.tab",sep=""),header=T) )
rownames(metazoa_species_clade_lht) = metazoa_species_clade_lht$species
table(metazoa_species_clade_lht$clade)
metazoa_species_clade_lht[,"clade_group"] = "Other Invertebrates"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Amphibia","Mammalia","Aves","Lepidosauria","Testudines","Crocodylia","Teleostei","Anura","Chondrichthyes"),"clade_group"] = "Other Vertebrates"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Blattodea","Coleoptera","Ephemeroptera","Hemiptera","Thysanoptera"),"clade_group"] = "Other Insecta"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Diptera","Lepidoptera"),"clade_group"] = "Lepido Diptera"
metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Nematoda","Hymenoptera","Mammalia","Aves","Teleostei","Embryophyta"),"clade_group"] = metazoa_species_clade_lht[metazoa_species_clade_lht$clade %in% c("Hymenoptera","Nematoda","Mammalia","Aves","Teleostei","Embryophyta"),"clade"]
metazoa_species_clade_lht$clade_group = factor(metazoa_species_clade_lht$clade_group, levels = c("Lepido Diptera","Hymenoptera","Other Insecta","Nematoda","Other Invertebrates","Mammalia","Aves","Teleostei","Other Vertebrates","Embryophyta"))
table(metazoa_species_clade_lht$clade_group)
# restrain = metazoa_species_clade_lht[!sapply(metazoa_species_clade_lht$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/summary_characteristics.tab",sep="")) ),]
#
# restrain$got_overlap = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_intron_major_overlap.tab",sep="")) )
# restrain$got_gene = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_gene_analysis.tab",sep="")) )
# restrain$got_gene = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_gene_analysis.tab",sep="")) )
# restrain = restrain[restrain$got_gene,]
# restrain$got_gc = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Annotations/",x,"/GC_content.tab",sep="")) )
# restrain$got_intron = sapply(restrain$species,function(x) file.exists(paste(path, "Projet-SplicedVariants/Analyses/",x,"/by_intron_cds.tab",sep="")) )
#
# paste(restrain[restrain$got_overlap,]$species,collapse="','")
get_CM_dNdS_true <- function(D) {
cum_KS=sum(D$num_dS)
cum_KN=sum(D$num_dN)
cum_OS=sum(D$den_dS/D$branch_length)
cum_ON=sum(D$den_dN/D$branch_length)
cum_dS=cum_KS/cum_OS
cum_dN=cum_KN/cum_ON
cum_dNdS=cum_dN/cum_dS
return(c(cum_dN,cum_dS,cum_dNdS))
}
# species = 'Cervus_elaphus'
# RECUPERE COLONNE
all_dt = c()
for (species in metazoa_species_clade_lht$species){
if (file.exists(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))){
dt = read.delim(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))
if( "longevity;quant" %in% dt$label){print(species)
# file.remove(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))
}
all_dt = c(dt$label,all_dt)
}
}
columns = unique(all_dt)
all_dt = data.frame()
for (species in metazoa_species_clade_lht$species){print(species)
if (file.exists(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))){
dt = read.delim(paste(path, "Projet-SplicedVariants/Analyses/",species,"/summary_characteristics.tab",sep=""))
rownames(dt) = dt$label
if (metazoa_species_clade_lht[species,]$clade == "Embryophyta"){
dt = dt[!grepl("_metazoa",(rownames(dt))),]
} else {
dt = dt[!grepl("_embryophyt",(rownames(dt))),]
}
all_dt = rbind(all_dt,dt[columns,]$value)
}
}
colnames(all_dt) = columns
method_list = c("Embryophyta_v1"="Embryophyta_v1/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v6"="Eukaryota_v6/subset_200_ksites_GC3/data_calculation.tab",
"Eukaryota_v7"="Eukaryota_v7/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v11"="Metazoa_v11/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v9"="Metazoa_v9/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v6"="Metazoa_v6/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v5"="Metazoa_v5/subset_200_ksites_GC3/data_calculation.tab",
"Metazoa_v4"="Metazoa_v4/subset_200_ksites/data_calculation.tab",
"Metazoa_species_filtered_v53.2"="Metazoa_species_filtered_v53.2/subset_200_ksites_GC3/data_calculation.tab")
for (method in names(method_list)){ print(method)
data_dNdS = read.delim(paste(path,"Projet-SplicedVariants/DnDs/",method_list[method],sep=""))
data_dNdS = data_dNdS[!is.na(data_dNdS$branch_length),]
for (species in unique(all_dt$species)){
data_sequence = data_dNdS[ data_dNdS$species == species,]
dnds_values = get_CM_dNdS_true(data_sequence)
all_dt[all_dt$species == species,paste(method,"_dn;quant",sep="")] = dnds_values[1]
all_dt[all_dt$species == species,paste(method,"_ds;quant",sep="")] = dnds_values[2]
all_dt[all_dt$species == species,paste(method,"_dnds;quant",sep="")] = dnds_values[3]
}
}
all_dt$`longevity;quant` = metazoa_species_clade_lht[all_dt$species,]$lifespan
all_dt$`length;quant` = metazoa_species_clade_lht[all_dt$species,]$length
all_dt$`weight;quant` = metazoa_species_clade_lht[all_dt$species,]$weight
write.table(all_dt,paste("/home/fbenitiere/Desktop/ICASDB_app/www/species_informations_tables/data_by_species.tab",sep=""),sep="\t",quote=F,row.names = F, col.names = T)
View(all_dt)
# Generate Data 1
options(stringsAsFactors = F, scipen = 999)
library(readxl)
library(stringr)
library(dplyr)
library(tidyr)
get_rsquared_slope = function(prop.quantile = 0.1,Xaxis,Yaxis){
quantile = unique(quantile(Xaxis, probs = seq(0, 1,prop.quantile),na.rm=T))
intervalle = cut(Xaxis, quantile,include.lowest = T,include.higher=T)
X = tapply(Xaxis, intervalle, median)
if ( !any(is.na(X)) ){
Y = tapply(Yaxis, intervalle, mean)
X = log10(X)
pearson_method = cor.test(X, Y,method="pearson")
cor = pearson_method$estimate
pval_cor = pearson_method$p.value
return( c(cor,pval_cor) )
} else {
return(
c(NA,NA)
)
}
}
read_excel_allsheets <- function(filename, tibble = FALSE) {
sheets <- readxl::excel_sheets(filename)
x <-
lapply(sheets, function(X)
readxl::read_excel(filename, sheet = X))
if (!tibble)
x <- lapply(x, as.data.frame)
names(x) <- sheets
x
}
pathData="/home/fbenitiere/data//Projet-SplicedVariants/"
# pathData="/beegfs/data/XXXXX/Projet-SplicedVariants/"
mysheets <- read_excel_allsheets(paste(pathData,"Fichiers-data/metazoa_species.xls",sep=""))
sp_studied = c()
for (species in names(mysheets)){
if (!is.na(mysheets[[species]]$Group_study[1]) & (mysheets[[species]]$Group_study[1] == "53_sp" | mysheets[[species]]$Group_study[1] == "69_sp")){
sp_studied = append(sp_studied,species)
}
}
data_dNdS_subset_200k_v2 = read.delim(paste(pathData,"DnDs/Metazoa_species_filtered_v53.2/subset_200_ksites_GC3_v2/data_calculation.tab",sep=""))
get_CM_dNdS<-function(D) {
# Compute the cumulated number of substitutions over all genes
cum_KS=sum(D$num_dS)
cum_KN=sum(D$num_dN)
cum_OS=sum(D$den_dS/D$branch_length)
cum_ON=sum(D$den_dS/D$branch_length)
# Compute cumulated DN, DS
cum_dS = cum_KS/cum_OS
cum_dN = cum_KN/cum_ON
# Compute cumulated dN/dS
cum_dNdS=cum_dN/cum_dS
return(cum_dNdS)
}
all_data = data.frame()
species = "Drosophila_melanogaster"
for (species in rev(sp_studied) ){
print(species)
con <- file(paste(pathData,"/Annotations/",species,"/data_source/annotation.gff",sep=""),"r")
first_line <- readLines(con,n=5)
close(con)
print(first_line[5])
genome_assembly = first_line[5]
genome_assembly = str_replace(genome_assembly,"#!genome-build-accession NCBI_Assembly:","")
clade = mysheets[[species]]$Clade[1]
body_size = mysheets[[species]]$`Length (cm)`[1]
longevity = mysheets[[species]]$`Longevity (days)`[1]
bioproj = read.delim(paste(pathData,"RNAseq_table/",species,"/list_Acc.tab",sep="" ) )
nb_rnaseq = nrow(bioproj)
list_rnaseq = paste(bioproj$SRA_accession_ID ,collapse = ";")
by_intron = read.delim(paste(pathData,species,".tab",sep=""),  sep="\t")
fpkm_cov = read.delim(paste(pathData,species,"fpkm.tab",sep=""),  sep="\t")
fpkm_cov = fpkm_cov[fpkm_cov$type == "gene" & grepl("gene_biotype=protein_coding" , fpkm_cov$attributes),]
major_introns = by_intron[by_intron$intron_class == "major" & by_intron$into_cds == "True" & by_intron$gene_id %in% fpkm_cov$gene_id,]
minor_introns = by_intron[by_intron$intron_class == "minor" & !is.na(by_intron$mira) & by_intron$into_cds == "True" & by_intron$gene_id %in% fpkm_cov$gene_id,]
fpkm_cov = fpkm_cov[fpkm_cov$busco_metazoa ,]
CoverageBuscoExon = round(median(tapply(fpkm_cov$exon_coverage,fpkm_cov$gene_id,mean),na.rm=T)) # detection de la couverture médiane des gènes Busco
major_introns_busco = major_introns[major_introns$gene_id %in% fpkm_cov$gene_id,]
minor_introns_busco = minor_introns[minor_introns$gene_id %in% fpkm_cov$gene_id,]
all_intron = by_intron[ by_intron$into_cds == "True" ,]
all_intron_busco = by_intron[by_intron$gene_id %in% fpkm_cov$gene_id & by_intron$into_cds == "True"  ,]
prop_major_nt_sup100 =  sum(major_introns$have_abundant_sv == "False" & (major_introns$n1 + major_introns$n2_spl3 + major_introns$n2_spl5) >= 100) / nrow(major_introns)
intron_svr_fpkm = major_introns[major_introns$have_abundant_sv == "False" & (major_introns$n1 + major_introns$n2_spl3 + major_introns$n2_spl5) >= 100,]
if (nrow(intron_svr_fpkm) != 0){
rlowSVR_slope_low_as = get_rsquared_slope(prop.quantile = 0.05, Xaxis=intron_svr_fpkm$fpkm, Yaxis= unlist(intron_svr_fpkm$splice_variant_rate))
} else { rlowSVR_slope_low_as=NA}
intron_svr_fpkm = major_introns[(major_introns$n1 + major_introns$n2_spl3 + major_introns$n2_spl5) >= 100,]
if (nrow(intron_svr_fpkm) != 0){
rlowSVR_slope = get_rsquared_slope(prop.quantile = 0.05, Xaxis=intron_svr_fpkm$fpkm, Yaxis= unlist(intron_svr_fpkm$splice_variant_rate))
} else { rlowSVR_slope=NA}
gene_n1 =  tapply(major_introns$n1,major_introns$gene_id,sum)
gene_n2 =   tapply(major_introns$n2_spl3,major_introns$gene_id,sum) +  tapply(major_introns$n2_spl5,major_introns$gene_id,sum)
gene_as_proteincoding_all = 1 - (1 - (gene_n2 / (gene_n1 + gene_n2)))^(tapply(major_introns$n1,major_introns$gene_id,length))
gene_n1 =  tapply(major_introns[major_introns$have_abundant_sv == "False",]$n1,major_introns[major_introns$have_abundant_sv == "False",]$gene_id,sum)
gene_n2 =   tapply(major_introns[major_introns$have_abundant_sv == "False",]$n2_spl3,major_introns[major_introns$have_abundant_sv == "False",]$gene_id,sum) + tapply(major_introns[major_introns$have_abundant_sv == "False",]$n2_spl5,major_introns[major_introns$have_abundant_sv == "False",]$gene_id,sum)
gene_as_proteincoding_lowas = 1 - (1 - ( gene_n2 / ( gene_n1 + gene_n2 )))^(tapply(major_introns$n1,major_introns$gene_id,length)[names(gene_n2)])
gene_n1 =  tapply(major_introns_busco$n1,major_introns_busco$gene_id,sum)
gene_n2 =   tapply(major_introns_busco$n2_spl3,major_introns_busco$gene_id,sum) +  tapply(major_introns_busco$n2_spl5,major_introns_busco$gene_id,sum)
gene_as_busco_all = 1 - (1 - (gene_n2 / (gene_n1 + gene_n2)))^(tapply(major_introns_busco$n1,major_introns_busco$gene_id,length))
gene_n1 =  tapply(major_introns_busco[major_introns_busco$have_abundant_sv == "False",]$n1,major_introns_busco[major_introns_busco$have_abundant_sv == "False",]$gene_id,sum)
gene_n2 =   tapply(major_introns_busco[major_introns_busco$have_abundant_sv == "False",]$n2_spl3,major_introns_busco[major_introns_busco$have_abundant_sv == "False",]$gene_id,sum) + tapply(major_introns_busco[major_introns_busco$have_abundant_sv == "False",]$n2_spl5,major_introns_busco[major_introns_busco$have_abundant_sv == "False",]$gene_id,sum)
gene_as_busco_lowas = 1 - (1 - ( gene_n2 / ( gene_n1 + gene_n2 )))^(tapply(major_introns_busco$n1,major_introns_busco$gene_id,length)[names(gene_n2)])
all_data = rbind(all_data, data.frame(
species ,
genome_assembly,
clade,
body_size,
longevity,
nb_rnaseq,
list_rnaseq,
dNdS_200k = get_CM_dNdS( data_dNdS_subset_200k_v2[data_dNdS_subset_200k_v2$species == species,]),
nb_busco = sum(fpkm_cov$busco_metazoa),
CoverageBuscoExon,
prop_analyzable_busco = sum(all_intron_busco$Annotation & (all_intron_busco$n1 + all_intron_busco$n2_spl3 + all_intron_busco$n2_spl5) >= 10 ) / sum(all_intron_busco$Annotation),
prop_analyzable_proteincoding = sum(all_intron$Annotation & (all_intron$n1 + all_intron$n2_spl3 + all_intron$n2_spl5) >= 10 ) /sum(all_intron$Annotation,na.rm = T),
splsite_gtag_minor_busco = sum(all_intron_busco[all_intron_busco$intron_class == "minor",]$splicesite %in% c("GT AG")) / sum(all_intron_busco$intron_class == "minor"),
splsite_gtag_major_busco = sum(all_intron_busco[all_intron_busco$intron_class == "major",]$splicesite %in% c("GT AG")) / sum(all_intron_busco$intron_class == "major"),
splsite_gcag_minor_busco = sum(all_intron_busco[all_intron_busco$intron_class == "minor",]$splicesite %in% c("GC AG")) / sum(all_intron_busco$intron_class == "minor"),
splsite_gcag_major_busco = sum(all_intron_busco[all_intron_busco$intron_class == "major",]$splicesite %in% c("GC AG")) / sum(all_intron_busco$intron_class == "major"),
splsite_atac_minor_busco = sum(all_intron_busco[all_intron_busco$intron_class == "minor",]$splicesite %in% c("AT AC")) / sum(all_intron_busco$intron_class == "minor"),
splsite_atac_major_busco = sum(all_intron_busco[all_intron_busco$intron_class == "major",]$splicesite %in% c("AT AC")) / sum(all_intron_busco$intron_class == "major"),
prop_major_sv_busco = sum((major_introns_busco$n2_spl3 + major_introns_busco$n2_spl5) > 0) /  nrow(major_introns_busco),
prop_major_sv_proteincoding = sum((major_introns$n2_spl3 + major_introns$n2_spl5) > 0) /  nrow(major_introns),
mean_gene_busco_as_lowas = mean(gene_as_busco_lowas),
mean_gene_busco_as = mean(gene_as_busco_all),
mean_gene_proteincoding_as_lowas = mean(gene_as_proteincoding_lowas),
mean_gene_proteincoding_as = mean(gene_as_proteincoding_all),
mean_as_proteincoding = mean( major_introns$splice_variant_rate ) * 100 ,
mean_as_proteincoding_high_as = mean(major_introns[major_introns$have_abundant_sv == "True"  ,]$splice_variant_rate)*100,
mean_as_proteincoding_low_as = mean(major_introns[major_introns$have_abundant_sv == "False",]$splice_variant_rate)*100,
mean_as_busco = mean( major_introns_busco$splice_variant_rate ) * 100 ,
mean_as_busco_high_as = mean(major_introns_busco[major_introns_busco$have_abundant_sv == "True"  ,]$splice_variant_rate)*100,
mean_as_busco_low_as = mean(major_introns_busco[major_introns_busco$have_abundant_sv == "False",]$splice_variant_rate)*100,
prop_rare_sv_protein_coding = sum( minor_introns$mira <= 0.05 ) / nrow(minor_introns) * 100,
prop_rare_sv_busco = sum( minor_introns_busco$mira <= 0.05 ) / nrow(minor_introns_busco) * 100,
mean_intron_per_gene_busco = mean(table(major_introns_busco$gene_id)),
mean_intron_per_gene_proteincoding = mean(table(major_introns$gene_id)),
prop_major_nt_sup100,
cor_as_fpkm_all_as = rlowSVR_slope[1],
pval_cor_as_fpkm_all_as = rlowSVR_slope[2],
cor_as_fpkm_low_as = rlowSVR_slope_low_as[1],
pval_cor_as_fpkm_low_as = rlowSVR_slope_low_as[2]
))
}
options(stringsAsFactors = F, scipen = 999)
library(cowplot)
library(ggplot2)
library(magick)
library(caper)
library(imager)
library(ape)
library(stringr)
library(png)
library(RColorBrewer)
set_color = brewer.pal(8, 'Paired')
set_color = append(set_color,c("#fdfd99","#e2cc1a"))
resolution = 3
path_require = "images_library/"
path_figure = "pannels/"
path_pannel = "figure/"
pathData = "~/data/Projet-SplicedVariants/"
lm_eqn <- function(m=lm(Y ~ X,data)){
if (summary(m)$coefficients[2,4] < 0.01){
paste(" =", format(summary(m)$r.squared, digits = 2) , "   p =",formatC(summary(m)$coefficients[2,4], format = "e", digits = 1))}
else {paste(" =", format(summary(m)$r.squared, digits = 2) , "   p =",format(summary(m)$coefficients[2,4], digits = 2))}
}
std <- function(x) sd(x)/sqrt(length(x))
vectorColor=c(Diptera="red",Coleoptera="#0a4413",
Hymenoptera="#ba8e18",Blattodea="darkblue",
Hemiptera="#00BFFF",Lepidoptera="#419f51",other="grey",
Testudines="blue",Mammalia="#66281A",Crocodylia="#5c5c5c"
,Aves="#000000",Teleostei="#579392",Anura="#39ABAD",Chondrichthyes="#8b27bc",
Testudines="blue","Monodelphis domestica"="#66281A",Mammalia="#66281A","Rattus norvegicus"="#66281A",
"Mus musculus"="#66281A","Macaca mulatta"="#66281A","Oryctolagus cuniculus"="#66281A","Homo sapiens"="#66281A"
,Crocodylia="#5c5c5c","Gallus gallus"="#000000",Teleostei="#579392",Anura="#39ABAD",Chondrichthyes="#1A6566")
vectorColor = vectorColor[c("Hymenoptera","Diptera","Lepidoptera","Coleoptera","Blattodea","Hemiptera",
"Mammalia","Crocodylia","Aves","Chondrichthyes")]
arbrePhylo = read.tree(paste("data/phylogenetic_tree.nwk",sep=""))
setwd("~/Desktop/2023-alternative_splicing")
options(stringsAsFactors = F, scipen = 999)
library(cowplot)
library(ggplot2)
library(magick)
library(caper)
library(imager)
library(ape)
library(stringr)
library(png)
library(RColorBrewer)
set_color = brewer.pal(8, 'Paired')
set_color = append(set_color,c("#fdfd99","#e2cc1a"))
resolution = 3
path_require = "images_library/"
path_figure = "pannels/"
path_pannel = "figure/"
pathData = "~/data/Projet-SplicedVariants/"
lm_eqn <- function(m=lm(Y ~ X,data)){
if (summary(m)$coefficients[2,4] < 0.01){
paste(" =", format(summary(m)$r.squared, digits = 2) , "   p =",formatC(summary(m)$coefficients[2,4], format = "e", digits = 1))}
else {paste(" =", format(summary(m)$r.squared, digits = 2) , "   p =",format(summary(m)$coefficients[2,4], digits = 2))}
}
std <- function(x) sd(x)/sqrt(length(x))
vectorColor=c(Diptera="red",Coleoptera="#0a4413",
Hymenoptera="#ba8e18",Blattodea="darkblue",
Hemiptera="#00BFFF",Lepidoptera="#419f51",other="grey",
Testudines="blue",Mammalia="#66281A",Crocodylia="#5c5c5c"
,Aves="#000000",Teleostei="#579392",Anura="#39ABAD",Chondrichthyes="#8b27bc",
Testudines="blue","Monodelphis domestica"="#66281A",Mammalia="#66281A","Rattus norvegicus"="#66281A",
"Mus musculus"="#66281A","Macaca mulatta"="#66281A","Oryctolagus cuniculus"="#66281A","Homo sapiens"="#66281A"
,Crocodylia="#5c5c5c","Gallus gallus"="#000000",Teleostei="#579392",Anura="#39ABAD",Chondrichthyes="#1A6566")
vectorColor = vectorColor[c("Hymenoptera","Diptera","Lepidoptera","Coleoptera","Blattodea","Hemiptera",
"Mammalia","Crocodylia","Aves","Chondrichthyes")]
arbrePhylo = read.tree(paste("data/phylogenetic_tree.nwk",sep=""))
data_1 = read.delim("data/Data1_supp.tab",comment.char = "#")
data_1v2 = read.delim("/home/fbenitiere/home/Scripts/Projet-SplicedVariants/SVR_estimation/v3/Data1_supp.tab",comment.char = "#")
plot(data_1v2$nb_busco,data_1$nb_busco)
plot(data_1v2$nb_busco,rev(data_1$nb_busco))
plot(data_1v2$CoverageBuscoExon,rev(data_1$CoverageBuscoExon))
plot(data_1v2$prop_analyzable_proteincoding,rev(data_1$prop_analyzable_proteincoding))
plot(data_1v2$mean_gene_busco_as,rev(data_1$mean_gene_busco_as))
plot(data_1v2$CoverageBuscoExon,rev(data_1$CoverageBuscoExon))
plot(data_1v2$cor_as_fpkm_low_as,rev(data_1$cor_as_fpkm_low_as))
plot(data_1v2$mean_intron_per_gene_proteincoding,rev(data_1$mean_intron_per_gene_proteincoding))
plot(data_1v2$prop_rare_sv_busco,rev(data_1$prop_rare_sv_busco))
View(data_1)
colnames(data_1v2)
for (col in colnames(data_1v2)){
plot(data_1v2[col],rev(data_1[col]))
}
data_1[col]
plot(data_1v2[,col],rev(data_1[,col]))
for (col in colnames(data_1v2)){
plot(data_1v2[,col],rev(data_1[,col]))
}
for (col in colnames(data_1v2)){
print(col)
plot(data_1v2[,col],rev(data_1[,col]))
}
colnames(data_1v2)
for (col in colnames(data_1v2)[2:50]){
print(col)
plot(data_1v2[,col],rev(data_1[,col]))
}
for (col in colnames(data_1v2)[3:50]){
print(col)
plot(data_1v2[,col],rev(data_1[,col]))
}
for (col in colnames(data_1v2)[4:50]){
print(col)
plot(data_1v2[,col],rev(data_1[,col]))
}
for (col in colnames(data_1v2)[5:50]){
print(col)
plot(data_1v2[,col],rev(data_1[,col]))
}
colnames(data_1v2)[5:50]
for (col in colnames(data_1v2)[5:50]){
print(col)
plot(data_1v2[,col],rev(data_1[,col]))
}
for (col in colnames(data_1v2)[5:50]){
print(col)
print(plot(data_1v2[,col],rev(data_1[,col])))
}
plot(data_1v2[,col],rev(data_1[,col]))
for (col in colnames(data_1v2)[10:50]){
print(col)
print(plot(data_1v2[,col],rev(data_1[,col])))
}
for (col in colnames(data_1v2)[5:50]){
print(col)
print(plot(data_1v2[,col],rev(data_1[,col])))
}
for (col in colnames(data_1v2)[7:50]){
print(col)
print(plot(data_1v2[,col],rev(data_1[,col])))
}
for (col in colnames(data_1v2)[8:50]){
print(col)
print(plot(data_1v2[,col],rev(data_1[,col])))
}
